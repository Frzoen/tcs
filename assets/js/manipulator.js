/*
 *  this file contains functions which support manipulator control functionality
 * 
 *  It uses the Revealing Module Pattern
 *  https://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript
 */

var manipulator = ( function () {
    /*
     *                                                                      PRIVATE area
     */

    const INTERVAL = 2000;    //  20 ms is the period of servo timing. It is used in this approach to change speed of servo mechanisms

    /*
     *  X0 and Y0 are the resting place coordinates (stow)
     */
    const X0 = 5;
    const Y5 = 5;

    //  object constructor for the array elements
    function position(servo_1, servo_2) {
        this.alpha = servo_1;
        this.beta = servo_2;
    }

    /*
     * values generated by Octave
     * -----------------------------------------------------------------------------------------
     */
    const alpha = [
        [51,60.1,69.2,78.3,86.2,94,102,107,111,114],
        [49.7,57.5,65.3,73.1,79.6,86.2,92.7,97.9,102,104],
        [47.1,53.6,61.4,67.9,74.4,79.6,84.8,88.8,92.7,96.6],
        [44.5,51,56.2,62.7,67.9,73.1,78.3,82.2,84.8,88.8],
        [40.5,45.8,52.3,57.5,62.7,66.6,71.8,74.4,78.3,80.9],
        [36.6,41.8,47.1,52.3,56.2,61.4,65.3,67.9,70.5,73.1],
        [32.7,36.6,41.8,47.1,51,54.9,57.5,61.4,64,66.6],
        [27.5,31.4,36.6,40.5,44.5,48.4,51,53.6,56.2,58.8],
        [21,26.2,30.1,34,37.9,40.5,44.5,47.1,48.4,49.7],
        [21,21,22.3,26.2,30.1,32.7,35.3,37.9,39.2,40.5]
    ];

    const beta = [
        [133,136,138,140,140,140,139,137,134,131],
        [126,129,131,132,132,132,131,130,127,124],
        [119,121,123,124,125,124,124,122,120,117],
        [111,114,115,116,116,116,116,114,112,110],
        [103,104,107,108,108,108,108,105,104,101],
        [94,96,98,99,99,99,99,97,95,92],
        [85,86,88,90,90,90,88,88,86,84],
        [75,76,78,79,79,79,78,76,75,73],
        [62,65,66,67,68,67,67,66,63,60],
        [58,54,52,53,54,54,53,52,49,45] 
    ];
    /*
     * -----------------------------------------------------------------------------------------
     */

    /*
     *  calibration values for servomechanisms
     *  may be used with other value than deg90 and deg0 (that's why there are variables degrees and shift)
     */
    function servoCalibration(deg0, deg90, degrees, shift) {
        this.degree = (deg90 - deg0)/degrees;
        this.zero = deg0 + shift;
    }

    function getServoPosition(servo, degrees) {
        return (servo.zero + servo.degree * degrees);
    }

    var servoAlpha = new servoCalibration(2150, 1200, 90, 0);
    var servoBeta = new servoCalibration(1200, 900, 30, 900);

    //  generated values for servo and different angles
    var anglesArray = [];

    for (i = 0; i < alpha.length; i++) {
        anglesArray[i] = [];
        for (j = 0; j < alpha[0].length; j++) {
            var temp = new position(getServoPosition(servoAlpha, alpha[i][j]), getServoPosition(servoBeta, beta[i][j]));
            anglesArray[i][j] = temp;
        }
    }

    //  contains coordinates for the anglesArray
    var currentPosition = {
        x: 0,
        y: 7,
        alpha: 0,
        beta: 0,
        checkDimensions: function () {
            if (this.x >= anglesArray.length) this.x = anglesArray.length;
            else if (this.x < 0) this.x = 0;

            if (this.y >= anglesArray[0].length) this.y = anglesArray[0].length;
            else if (this.y < 0) this.y = 0;
        }
    }

    var gripperPosition = {
        gripperTimer: 3600
    }

    /*
	 * 																		SUBSCRIBE to all topics
	 */
    amplify.subscribe("controlCanvas->manipulator", controlCanvasCallback);

    /*
     *                                                                      CALLBACKS
     */
    function controlCanvasCallback(message) {
        if (DEBUG) console.log("controlCanvasCallback: " + message);
		if (DEBUG) amplify.publish("all->utests", message);

        switch (message) {
            case "move":
                move();
                break;
            case "stow":
                break;
            case "stop":
                stop();
                break;
            default:
                console.log("unknown command: " + message);
        }
    };

    /*
     *                                                                      MOVE functionality
     */

    var moveInterval;
    /*
     *  move in the desired direction
     */
    function move() {
        var manipulatorMove = controlCanvas.getManipulatorMove();

        //moveInterval = setInterval(nextStep, INTERVAL, manipulatorMove);
        nextStep(manipulatorMove);
    };

    function stop(){
        clearInterval(moveInterval);
    };

    /*
     *  execute next step in intervals
     */
    function nextStep(manipulatorMove) {
        /*switch(manipulatorMove.direction) {
            case "up":
                currentPosition.y++;
                break;
            case "down":
                currentPosition.y--;
                break;
            case "right":
                currentPosition.x++;
                break;
            case "left":
                currentPosition.x--;
                break;
            default:
                console.log("wrong direction");
        }*/

        currentPosition.x = $("#servo-control-input").val();
        currentPosition.y = $("#servo-control-vertical-input").val();;

        //  to nearest if outside range
        currentPosition.checkDimensions();

        console.log("currentPosition.x: " + currentPosition.x + "\tcurrentPosition.y: " + currentPosition.y);

        currentPosition.alpha = anglesArray[currentPosition.x][currentPosition.y].alpha;
        currentPosition.beta = anglesArray[currentPosition.x][currentPosition.y].beta;

        amplify.publish("manipulator->port8080", "set new servo position");
    };

    /*
     *                                                                      REVEALED functions
     */
    function getCurrentPositionPriv() {
        return currentPosition;
    };

    function getGripperPositionPriv() {
        return gripperPosition.gripperTimer;
    };

    function setPositionPriv() {};

    /*
     *                                                                      PUBLIC area
     */
    return {
        getCurrentPosition : getCurrentPositionPriv,
        getGripperPosition : getGripperPositionPriv,
        setPosition : setPositionPriv
    };
})();

